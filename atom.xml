<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shine's Blog]]></title>
  <link href="http://shineli.com/atom.xml" rel="self"/>
  <link href="http://shineli.com/"/>
  <updated>2014-07-16T10:48:46+08:00</updated>
  <id>http://shineli.com/</id>
  <author>
    <name><![CDATA[李鑫]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014年下半年计划]]></title>
    <link href="http://shineli.com/blog/2014/07/16/2014nian-xia-ban-nian-ji-hua/"/>
    <updated>2014-07-16T10:31:26+08:00</updated>
    <id>http://shineli.com/blog/2014/07/16/2014nian-xia-ban-nian-ji-hua</id>
    <content type="html"><![CDATA[<p>2014年就在不知不觉的时候过去了一半，晋升的欣喜以及跟腱断裂的痛苦使得过去的半年过的混混沌沌。
尽管下半年已经过去了15天，但是开始去做总比老想着去做好~~</p>

<blockquote><p>Just Do It！！！</p></blockquote>

<p>以下是制定的相关计划脑图，感觉有点多和难，不过慢慢来吧~~~</p>

<p><embed src="http://shineli.com/images/2014_plan.swf" quality=high width="100%" height="800px"  wmode=transparent type='application/x-shockwave-flash'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yii的Event和Behavior]]></title>
    <link href="http://shineli.com/blog/2014/05/09/yiide-eventhe-behavior/"/>
    <updated>2014-05-09T15:03:15+08:00</updated>
    <id>http://shineli.com/blog/2014/05/09/yiide-eventhe-behavior</id>
    <content type="html"><![CDATA[<p>命运有时真的挺奇怪的，从实习开始阴差阳错的被分配到现在的小组，从头开始学习了PHP，期间一直在用CakePHP和Yii Framework。二者优劣暂且不表，尽管中间也陆陆续续的读过这两个框架的一些源码，却始终没有坚持下来。
恰逢Yii2.0即将发布，也想仔细阅读下相关源码来加深对于PHP以及MVC框架的一些理解。</p>

<p>由于只读代码的话，印象不是很深刻；因此，在阅读过后，会根据自己的理解来模仿Yii2.0写一个试验性的框架。
地址：<a href="https://github.com/baidushine/shf">https://github.com/baidushine/shf</a></p>

<p>Yii的</p>

<h3>Property</h3>

<h3>Event</h3>

<h3>Behavior</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自我驱动与驱动他人]]></title>
    <link href="http://shineli.com/blog/2014/05/06/zi-wo-qu-dong-yu-qu-dong-ta-ren/"/>
    <updated>2014-05-06T18:30:24+08:00</updated>
    <id>http://shineli.com/blog/2014/05/06/zi-wo-qu-dong-yu-qu-dong-ta-ren</id>
    <content type="html"><![CDATA[<p>随着工作年限的增加，工作中沟通与扯皮的事情也越来越多，研发人员作为研发环节的下游，往往属于被坑的对象。</p>

<p>程序员段子：</p>

<blockquote><p>杀一个程序员不需要用枪，改三次需求就可以了</p></blockquote>

<!-- more -->


<p>在我看来，这种情况出现的原因有以下两个：</p>

<h4>1. PM修改需求的成本远远低于研发人员开发的成本</h4>

<p>需求中的用户交互体验是最难评判的，往往掺杂着很多主观色彩在里面，而PM却无法有效估计研发成本 或者 大家都是乐观派，会认为改动都很小；
另一方面，产品在临上线前，PM往往会发现功能的一些漏洞 或者 有些地方没有想明白
因此，导致了需求一日三变的情况发生。尤其随着敏捷开发的推广，使得很多PM都不撰写MRD了，只是撰写简单的story，
这样PM的成本进一步降低。</p>

<h4>2. RD的产品意识不强烈</h4>

<p>很多RD往往认为技术是最关键的，殊不知技术是基石，业务熟悉度以及全局观才是区分好程序员的根本原因（当然技术也很重要~~）。当RD缺乏业务敏感度以及全局观时，
一方面无法评价PM的需求是否合理，对于PM的需求修改只能全盘接受，无法给出合理建议；同时，大局观的缺乏也使得架构和代码实现过于耦合，加大了需求变更的成本。</p>

<p>要破解上述困境，只能 <strong>自我驱动与驱动他人</strong> 两方面同时发力了。</p>

<p>PM要考虑事情尽量全面，做到任何需求都是有理论或者实际支撑（如调研过其他很多类似产品），要能尽量去了解技术，知道变更的成本。
RD作为PM的资源，PM要合理利用，而不是提出需求就一副高高挂起的样子，尤其抱着需求就这样了，出了问题我负责的态度，因为没有任何一个角色或者个人能对产品负责。</p>

<p>而RD也要尽量去熟悉业务和去了解业内其他产品，以便增加自己的全局观。同时，这样不仅可以更加理解PM的需求目的和评判需求的优劣&amp;重要性，也可以在产品设计时充分保证业务变动的开放性。</p>

<p>好吧，啰啰嗦嗦了一堆，只是有感于今天和业务同学沟通时，发现出了问题后，提出的改进措施都是别人要如何如何，却不从自身找原因，
而自己抱着赌气的态度去进行了争论，以后尽量做到心平气和，从不同的角度去看待问题吧。</p>

<p>用下面的话自勉：</p>

<blockquote><p>驱动他人是很难的，因此，自我驱动才是核心。比别人爬的高，才会看的远~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assignments of Week 1:Functions&amp;Evaluations]]></title>
    <link href="http://shineli.com/blog/2014/04/29/assignments-of-week-1-functions-and-evaluations/"/>
    <updated>2014-04-29T16:10:36+08:00</updated>
    <id>http://shineli.com/blog/2014/04/29/assignments-of-week-1-functions-and-evaluations</id>
    <content type="html"><![CDATA[<p>函数式编程一直想去了解，同时coursera课程报了很多，却都没有仔细去读和做练习。正好&#8221;Functional Programming Principles in Scala&#8221;开课了………
一切又重头开始了，希望这次可以坚持下来，拿到一个不同的结尾~</p>

<h2>概览</h2>

<p>本周的作业有三个练习题：Pascal’s Triangle、Parentheses Balancing以及Counting Change，均是关于递归的练习，其中如何<em><em>划分子问题</em></em>以及<em><em>终结条件</em></em>是关键点。
算法还是要加强啊~~~~</p>

<!--more-->


<h2>Pascal’s Triangle</h2>

<p>题目：The following pattern of numbers is called Pascal’s triangle.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1
</span><span class='line'>1 1
</span><span class='line'>1 2 1
</span><span class='line'>1 3 3 1
</span><span class='line'>1 4 6 4 1
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Do this exercise by implementing the pascal function in Main.scala, which takes a column c and a row r, counting from 0 and returns the number at that spot in the triangle. For example, pascal(0,2)=1, pascal(1,2)=2 and pascal(1,3)=3.</p>

<p>这道题目很简单，就是打印杨辉三角而已，代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">pascal</span><span class="o">(</span><span class="n">c</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">r</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="c1">//cover the edge number</span>
</span><span class='line'>      <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">pascal</span><span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">pascal</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Parentheses Balancing</h2>

<p>题目：Write a recursive function which verifies the balancing of parentheses in a string, which we represent as a List[Char] not a String.
For example, the function should return <strong>true</strong> for the following strings:</p>

<pre><code>(if (zero? x) max (/ 1 x))、
I told him (that it’s not (yet) done). (But he wasn’t listening)
</code></pre>

<p>The function should return <strong>false</strong> for the following strings:</p>

<pre><code>:-)
())(
</code></pre>

<p>这个题目一开始想的比较麻烦，后来感觉只要匹配括号的数量，同时右括号的数量不能大于左边括号的数量即可,代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">balance</span><span class="o">(</span><span class="n">chars</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">])</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">isBalance</span><span class="o">(</span><span class="n">left</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">right</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">sub</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">])</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">right</span> <span class="o">&gt;</span> <span class="n">left</span><span class="o">)</span>
</span><span class='line'>        <span class="kc">false</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">sub</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">==</span> <span class="n">right</span>
</span><span class='line'>      <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sub</span><span class="o">.</span><span class="n">head</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">isBalance</span><span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">sub</span><span class="o">.</span><span class="n">tail</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">sub</span><span class="o">.</span><span class="n">head</span> <span class="o">==</span> <span class="sc">&#39;)&#39;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">isBalance</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">sub</span><span class="o">.</span><span class="n">tail</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">isBalance</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">sub</span><span class="o">.</span><span class="n">tail</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">isBalance</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">chars</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>终止条件在一开始遗漏了left > right的情况（好吧，我也不知道为什么会范这个错误）即最初代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">left</span> <span class="o">==</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">sub</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span>
</span><span class='line'>  <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Counting Change</h2>

<p>题目：Write a recursive function that counts how many different ways you can make change for an amount, given a list of coin denominations. For example, there are 3 ways to give change for 4 if you have coins with denomiation 1 and 2: 1+1+1+1, 1+1+2, 2+2.</p>

<p>思路：假设总共的change的数量为money，coin列表为A，B，C，则用coin去表示change的情况可以分为：不含A的组合 + 含A的组合，而含A的组合等价于money &ndash; A用coin表示的情况</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">countChange</span><span class="o">(</span><span class="n">money</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">coins</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">money</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">coins</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">money</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">countChange</span><span class="o">(</span><span class="n">money</span><span class="o">,</span> <span class="n">coins</span><span class="o">.</span><span class="n">tail</span><span class="o">)</span> <span class="o">+</span> <span class="n">countChange</span><span class="o">(</span><span class="n">money</span> <span class="o">-</span> <span class="n">coins</span><span class="o">.</span><span class="n">head</span><span class="o">,</span> <span class="n">coins</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown&amp;Ocotopress语法说明]]></title>
    <link href="http://shineli.com/blog/2014/04/23/markdown-and-ocotopressyu-fa-shuo-ming/"/>
    <updated>2014-04-23T16:47:08+08:00</updated>
    <id>http://shineli.com/blog/2014/04/23/markdown-and-ocotopressyu-fa-shuo-ming</id>
    <content type="html"><![CDATA[<p>markdown的语法简单查看了一下，的确不是很复杂，怪不得大家写blog喜欢用，这里简单记录一些常用的，方便自己查看~~</p>

<h2>markdown 语法</h2>

<ol>
<li><p>标题
 # 一级标题 #
 ## 二级标题 ##
 ###### 依次类推，最高到6级标题 ######</p></li>
<li><p>无序列表</p>

<ul>
<li>分类1</li>
<li>分类2</li>
<li>分类3</li>
</ul>
</li>
<li><p>区块的例子，作为引用存在</p>

<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote></li>
</ol>


<!--more-->


<ol>
<li><p>链接</p>

<p> This is <a href="http://example.com/" title="Title">an example</a> inline link.</p>

<p> <a href="http://example.com/">http://example.com/</a></p></li>
<li><p>强调</p>

<p> <em>single asterisks</em>
 <em>single underscores</em></p>

<p> <strong>double asterisks</strong>
 <strong>double underscores</strong></p></li>
</ol>


<h2>octopress语法</h2>

<ol>
<li>代码</li>
</ol>


<p><code></p>

<pre><code>选项：[lang:language] [title] [url] [link text] [start:#] [mark:#,#-#] [linenos:false]
</code></pre>

<p></code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="nb">phpinfo</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>图片</li>
</ol>


<p><code></p>

<pre><code>语法：&lt;img class="[class names]" src="http://shineli.com/path/to/image" title="[width] [height] [title text [alt text]]" &gt;
</code></pre>

<p></code></p>

<p><img src="http://placekitten.com/890/280">
<img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten"></p>
]]></content>
  </entry>
  
</feed>
